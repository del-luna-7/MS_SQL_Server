-- 1
CREATE TRIGGER CheckGroupStudentsCount
ON Student
INSTEAD OF INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM inserted i
        JOIN Groups g ON i.GroupId = g.GroupId
        WHERE (SELECT COUNT(*) FROM Student WHERE GroupId = g.GroupId) >= 30
    )
    BEGIN
        PRINT N'Превышен лимит студентов в группе!';
        ROLLBACK TRANSACTION;
        RETURN;
    END

    INSERT INTO Student (StudentId, Name, GroupId, Grade)
    SELECT StudentId, Name, GroupId, Grade FROM inserted;
END;

-- 2
CREATE TRIGGER UpdateGroupStudentCount
ON Student
AFTER INSERT, DELETE
AS
BEGIN
    UPDATE Groups
    SET StudentsCount = (SELECT COUNT(*) FROM Student WHERE GroupId = Groups.GroupId)
    WHERE GroupId IN (
        SELECT GroupId FROM inserted
        UNION
        SELECT GroupId FROM deleted
    );
END;

-- 3
CREATE TRIGGER AutoRegistrationToCourse
ON Student
AFTER INSERT
AS
BEGIN
    INSERT INTO Grade (StudentId, CourseId, Grade)
    SELECT i.StudentId, c.CourseId, NULL
    FROM inserted i
    JOIN Course c ON c.CourseName = N'Введение в программирование';
END;

-- 4
ALTER TABLE Warnings ADD Date DATETIME;

CREATE TRIGGER LowGradeWarning
ON Grade
AFTER INSERT, UPDATE
AS
BEGIN
    INSERT INTO Warnings (StudentId, Reason, Date)
    SELECT StudentId, N'Оценка ниже 3', GETDATE()
    FROM inserted
    WHERE Grade < 3;
END;

-- 5
CREATE TABLE Teachers (
    TeacherId INT PRIMARY KEY,
    Name VARCHAR(255)
);

ALTER TABLE Course ADD TeacherId INT FOREIGN KEY REFERENCES Teachers(TeacherId);

CREATE TRIGGER PreventTeacherDeletion
ON Teachers
INSTEAD OF DELETE
AS
BEGIN
    IF EXISTS (
        SELECT 1 FROM Course WHERE TeacherId IN (SELECT TeacherId FROM deleted)
    )
    BEGIN
        PRINT N'Нельзя удалить преподавателя, за которым закреплены курсы!';
        ROLLBACK TRANSACTION;
        RETURN;
    END

    DELETE FROM Teachers WHERE TeacherId IN (SELECT TeacherId FROM deleted);
END;

-- 6
CREATE TABLE GradeHistory (
    HistoryId INT PRIMARY KEY IDENTITY,
    StudentId INT,
    CourseId INT,
    OldGrade INT,
    NewGrade INT,
    ChangeDate DATETIME
);

CREATE TRIGGER SaveGradeHistory
ON Grade
AFTER UPDATE
AS
BEGIN
    INSERT INTO GradeHistory (StudentId, CourseId, OldGrade, NewGrade, ChangeDate)
    SELECT d.StudentId, d.CourseId, d.Grade, i.Grade, GETDATE()
    FROM deleted d
    JOIN inserted i ON d.StudentId = i.StudentId AND d.CourseId = i.CourseId;
END;

-- 7
CREATE TABLE RetakeList (
    RetakeId INT PRIMARY KEY IDENTITY,
    StudentId INT,
    Reason VARCHAR(255),
    Date DATETIME
);

CREATE TRIGGER MissedLessons
ON Attendance
AFTER INSERT
AS
BEGIN
    INSERT INTO RetakeList (StudentId, Reason, Date)
    SELECT StudentId, N'Более 5 пропусков подряд', GETDATE()
    FROM Attendance
    WHERE StudentId IN (SELECT StudentId FROM inserted)
    GROUP BY StudentId
    HAVING COUNT(*) > 5;
END;

-- 8
CREATE TRIGGER StudentDeletionStop
ON Student
INSTEAD OF DELETE
AS
BEGIN
    IF EXISTS (
        SELECT 1 FROM Payments
        WHERE StudentId IN (SELECT StudentId FROM deleted)
    )
    OR EXISTS (
        SELECT 1 FROM Grade
        WHERE StudentId IN (SELECT StudentId FROM deleted) AND Grade < 3
    )
    BEGIN
        PRINT N'Нельзя удалить студента с долгами или неудовлетворительными оценками!';
        ROLLBACK TRANSACTION;
        RETURN;
    END

    DELETE FROM Student WHERE StudentId IN (SELECT StudentId FROM deleted);
END;

-- 9
CREATE TRIGGER StudentAverageScoreUpdate
ON Grade
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    UPDATE Student
    SET Grade = (
        SELECT AVG(CAST(Grade AS FLOAT))
        FROM Grade
        WHERE StudentId = Student.StudentId
    )
    WHERE StudentId IN (
        SELECT StudentId FROM inserted
        UNION
        SELECT StudentId FROM deleted
    );
END;
